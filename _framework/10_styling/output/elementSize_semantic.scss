// cast to number:
// http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function fw_length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);

  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @return $number * nth($units, $index);
}

@function fw-number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);


    @if $character == '-' {
      $minus: true;
    }

    @else if $character == '.' {
      $divider: 1;
    }

    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return fw_length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      }

      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}

// fw size mixins
@mixin fw-generate-size(
  $height: null,
  $proportion: 0.45
){

  // in case of custom height
  @if $height == null {
    @error "height must be defined for generate size";
  }

  @if type-of($height) != number {
    @error "$height: #{$height} must be a number.";
  }

  // convert height to 'px' if unit wasn't defined
  @if unitless($height) {
    $height: $height * 1px;
  }

  // calculate proportional padding
  $padding-x: ($height)*$proportion;

  // calculate best font size and weight for the element
  $unit: unit($height);
  $base-font: fw-convert-unit(11px, $unit);
  $base-height: fw-convert-unit(20px, $unit);
  $font-growth: 0.25;
  $extra-font: ($height - $base-height) * $font-growth;
  $font-size: $base-font + $extra-font;
  $font-weight: null;
  @if $height <= fw-convert-unit(24px, $unit) {
    $font-weight: 700;
  }
  @if $height <= fw-convert-unit(30px, $unit) and $height > fw-convert-unit(24px, $unit) {
    $font-weight: 600;
  }

  //render calculated values as css properties
  //- height: $height;
  line-height: $height;
  height: $height; // ie
  padding: 0 $padding-x;
  font-size: $font-size;
  font-weight: $font-weight;


}

@mixin fw-size(
  $height: null,
  $responsive: no-responsive,
  $proportion: 0.45
){

  // predefined element size
  @if $height == xxs { $height: 20px; }
  @if $height == xs  { $height: 24px; }
  @if $height == sm  { $height: 30px; }
  @if $height == md  { $height: 38px; }
  @if $height == lg  { $height: 48px; }
  @if $height == xl  { $height: 60px; }
  @if $height == xxl { $height: 74px; }
  @if $height == xxxl  { $height: 90px; }

  @if type-of($height) == number {
    @include fw-generate-size($height, $proportion);

    @if $responsive == responsive and fw-convert-unit($height, px) > 31px {

      $end: $height;
      $begin: fw-convert-unit(30px, unit($height)) + $height * 0.12; // last param is growth factor

      $scale-sm: fw-getResolutionScale(map-get($fw-breakpoints, sm));
      $scale-md: fw-getResolutionScale(map-get($fw-breakpoints, md));
      $scale-lg: fw-getResolutionScale(map-get($fw-breakpoints, lg));

      $height-sm: fw-number(fw-scaleValues($begin, $end, $scale-sm));
      $height-md: fw-number(fw-scaleValues($begin, $end, $scale-md));
      $height-lg: fw-number(fw-scaleValues($begin, $end, $scale-lg));

      @include fw-media(lg){
        @include fw-generate-size($height-lg, $proportion);
      };
      @include fw-media(md){
        @include fw-generate-size($height-md, $proportion);
      };
      @include fw-media(sm){
        @include fw-generate-size($height-sm, $proportion);
      };



    }
  }
}

button%fw-size-button,
%fw-size-button[type=button]{
  line-height: normal;
}

@mixin fw-size-base {
  box-sizing: border-box;
  display: inline-block;
  > * {
    line-height: inherit;
  }

  @extend %fw-size-button;

}