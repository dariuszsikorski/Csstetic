// ------------------------
// helper function for grid
//

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function fw-decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// source:
// http://stackoverflow.com/questions/29901096/sass-scss-rounding-down-with-decimal-places
@function fw-decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function fw-decimal-ceil ($number, $digits: 0) {
  @return fw-decimal-round($number, $digits, ceil);
}

// calculate and check grid size settings
@function fw-grid-calc(
  $settings: null
){
  $columns: map-get($settings, columns);
  $gridWidth: map-get($settings, gridWidth);
  $columnWidth: map-get($settings, columnWidth);
  $spacingX: map-get($settings, spacingX);
  $spacingY: map-get($settings, spacingY);

  // ---------------
  // check arguments
  //

  // force to pass only 2 arguments
  $args: 0;
  @if $columns != null { $args: $args+1 }
  @if $gridWidth != null { $args: $args+1 }
  @if $columnWidth != null { $args: $args+1 }
  @if $args != 2 {
    @error "You have to pass two 'sizing arguments' to generate grid.";
  }


  // if width is unitless proportion - convert to %;
  @if $gridWidth and type-of($gridWidth) == number {
    @if unitless($gridWidth) {
      @if $gridWidth <= 0 or $gridWidth > 1 {
        @error 'grid: $gridWidth #{$gridWidth} gives you #{$gridWidth * 100%}, $gridWidth must be between 1% and 100%';
      }
      $gridWidth: $gridWidth * 100%;
    }
  }

  // if column is unitless proportion - convert to %;
  @if $columnWidth and type-of($columnWidth) == number {
    @if unitless($columnWidth) {
      @if $columnWidth<= 0 or $columnWidth > 1 {
        @error 'grid: $columnWidth #{$columnWidth} gives you #{$columnWidth * 100%}, $columnWidth must be between 1% and 100%';
      }
      $columnWidth: $columnWidth * 100%;
    }
  }

  // prevent passing number of columns and percentage columnWidth same time
  @if $columns and type-of($columnWidth) == number {
    @if unit($columnWidth) == "%" {
      @error "grid: you can't define number of columns and columnWidth in [%] at the same time.";
    }
  }

  // -------------------------
  // check argument data types
  //

  // $columns must be a full unitless number, for example: 12
  // $columns: null;
  @if $columns {
    @if type-of($columns) != number or unitless($columns) == false or round($columns) != $columns {
      @error 'grid: $columns #{$columns} must be a full unitless number, for example: 12';
    }
    @if $columns <= 0 {
      @error 'grid: $columns #{$columns} must be bigger than 0';
    }
  }

  // $gridWidth must be a number in [0+]px or [1-100]% or unitless [a/b]proportion, for example: 960px or 80% or 4/5
  // $gridWidth: 10;
  @if $gridWidth {
    @if type-of($gridWidth) != number or
        unit($gridWidth) != px and
        unit($gridWidth) != "%" and
        unitless($gridWidth) != true {
      @error 'grid: $gridWidth #{$gridWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 960px or 80% or 4/5';
    }
    @if $gridWidth <= 0 {
      @error 'grid: $gridWidth #{$gridWidth} must be bigger than 0';
    }
  }

  // $columnWidth must be a number in px or %, or unitless proportion, for example: 80px or 10%, or 1/12
  // $columnWidth: 1%;
  @if $columnWidth {
    @if type-of($columnWidth) != number or
        unit($columnWidth) != px and
        unit($columnWidth) != "%" and
        unitless($columnWidth) != true {
      @error 'grid: $columnWidth #{$columnWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 80px or 10% or 1/12';
    }
    @if $columnWidth <= 0 {
      @error 'grid: $columnWidth #{$columnWidth} must be bigger than 0';
    }
  }

  // $spacingX must be a number in px[0+], for example: 20px
  // $spacingX: 20px;
  @if $spacingX {
    @if type-of($spacingX) != number or
        (unit($spacingX) == px or unitless($spacingX)) == false {
      @error 'grid: $spacingX #{$spacingX} must be a number in px[0+], for example: 20px';
    }
  }
  // $spacingY must be a number in px[0+], for example: 20px
  // $spacingY: 12px;
  @if $spacingY {
    @if type-of($spacingY) != number or
        (unit($spacingY) == px or unitless($spacingY)) == false {
      @error 'grid: $spacingY #{$spacingY} must be a number in px[0+], for example: 20px';
    }
  }

  // --------------------------------------
  // calculate missing third size arguments
  //

  // automatically calculate third argument of sizing
  // case calculate size
  @if $gridWidth and $columnWidth {

    // case 1 width in % column in %
    @if unit($gridWidth) == "%" and unit($columnWidth) == "%" {
      $columns: floor(100%/$columnWidth);
    }

    // case 2 width in % column in px
    @if unit($gridWidth) == "%" and unit($columnWidth) == px {
      $columns: 12;
    }

    // case 3 width in px column in %
    @if unit($gridWidth) == px and unit($columnWidth) == "%" {
      $columns: floor(100%/$columnWidth);
    }

    // check if user passed proper column width for case 1 or 3
    @if (unit($gridWidth) == "%" and unit($columnWidth) == "%") or
        (unit($gridWidth) == px and unit($columnWidth) == "%") {
      $check-width: fw-decimal-ceil($columns * $columnWidth, 5);
      @if $check-width != 100% {
        @error 'grid: Wrong column width: #{$columns}cols * #{$columnWidth} = #{$check-width}, a sum of 100% is expected.';
      }
    }

    // case 4 width in px column in px
    @if unit($gridWidth) == px and unit($columnWidth) == px {
      $columns: floor($gridWidth / $columnWidth);
      $check-width: fw-decimal-ceil($columns * $columnWidth, 5);
      @if $check-width != $gridWidth {
        @error 'grid: Wrong column width: #{$columns}cols * #{$column} = #{$check-width}, #{$gridWidth}(grid width) is expected.';
      }
    }
  }
  // case calculate width
  @else if $columns and $columnWidth {
    // case 5 size and column in %
    @if unit($columnWidth) == "%" {
      // you can't define size and column width in % at the same time
      // $gridWidth has been set to 100% and go to calculations in case 7
    }

    // case 6 size and column in px
    @if unit($columnWidth) == px {
      $gridWidth: $columns * $columnWidth;
    }
  }

  // case calculate column
  @else if $columns and $gridWidth {
    // case 7 size and grid width in %
    // calculate column width by dividing 100%/$columns
    @if unit($gridWidth) == "%" {
      $columnWidth: 100% / $columns;
    }

    // case 8 size and width in px
    @if unit($gridWidth) == px {
      $columnWidth: $gridWidth / $columns;
    }
  }

  @return (
    columns: $columns,
    gridWidth: $gridWidth,
    columnWidth: $columnWidth,
    spacingX: $spacingX,
    spacingY: $spacingY
  )
}

@mixin fw-generate-grid(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $columns: map-get($grid-calc, columns);
  $gridWidth: map-get($grid-calc, gridWidth);
  $columnWidth: map-get($grid-calc, columnWidth);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);

  box-sizing: border-box;
  margin: auto;
  width: $gridWidth;
  @include fw-clearfix;

}




@mixin fw-generate-column(
  $span: null,
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $columnWidth: map-get($grid-calc, columnWidth);
  $columns: map-get($grid-calc, columns);
  $spacingX: map-get($grid-calc, spacingX);
  $spanWidth: $span * $columnWidth;
  // if spacingX is defined - remove it's width from columnWidth
  @if $spacingX {
    @if unit($columnWidth) == px or $spacingX == 0 {
      // PX Width
      $columnWidth: $columnWidth + $spacingX / $columns;
      width: -1 * fw-decimal-round($spacingX + $columnWidth * $span, 3, floor);
    } @else {
      // % + PX Width
      width: fw-decimal-round($columnWidth * $span, 3, floor); // old browsers fallback
      width: calc(#{-1 * $spacingX} + #{fw-decimal-round($columnWidth * $span, 3, floor)});
    }
  } @else {
    width: fw-decimal-round($columnWidth * $span, 3, floor);
  }
}

@mixin fw-column-base(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);

  box-sizing: border-box;
  float: left;

  @if $spacingX {
    margin-left: $spacingX;
  } @else {
    margin-left: 0;
  }
  @if $spacingY {
    margin-top: $spacingY;
  } @else {
    margin-top: 0;
  }

}

@mixin fw-grid-row(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);
  @include fw-clearfix;
  @if $spacingX {
    margin-left: #{$spacingX * -1};
  } @else {
    margin-left: 0;
  }
  @if $spacingY {
    margin-top: #{$spacingY * -1};
  } @else {
    margin-top: 0;
  }

}