

<splitSection output="output/gridSystem_section.jade">

  section.sec-gridSystem
    h3 Grid
    h5 Slice block into rows, then into responsive columns.<br>Very useful for building basement for layouts.


    .fw-tabulators
      span Grid demo
      span Responsive grid
      span Responsive grid & tiles
    .fw-tabs
      div
        .fw-resizable.fw-copy.c-elements.fw-example
          .fw-grid
            .fw-grid-row
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
              .fw-col-1 col-1
            .fw-grid-row
              .fw-col-2 col-2
              .fw-col-2 col-2
              .fw-col-2 col-2
              .fw-col-2 col-2
              .fw-col-2 col-2
              .fw-col-2 col-2
            .fw-grid-row
              .fw-col-3 col-3
              .fw-col-3 col-3
              .fw-col-3 col-3
              .fw-col-3 col-3
            .fw-grid-row
              .fw-col-4 col-4
              .fw-col-4 col-4
              .fw-col-4 col-4
            .fw-grid-row
              .fw-col-6 col-6
              .fw-col-6 col-6

      div
        p.fw-container Resize the demo
        //- p content 2
        .fw-resizable.fw-copy
          iframe(src='../demos/responsive_grid_demo.html')
      div
        p.fw-container Resize the demo
        //- p content 2
        .fw-resizable.fw-copy
          iframe(src='../demos/responsive_grid_tiles_demo.html')



    .fw-tabulators
      span Short usage
      span Semantic
      span Classic

    .fw-tabs
      div.fw-container
        .fw-separator
          span Semantic
        .fw-code.scss
          :code
            $my-grid: (
              columns: 12,
              gridWidth: 100%
            );
            .my-grid {
              @include fw-generate-grid($my-grid);
            }
            .my-grid-row {
              @include fw-grid-row($my-grid);
            }
            .my-grid-col {
              @include fw-column-base($my-grid);
            }
            .my-col-6 {
              @include fw-generate-column(6, $my-grid);
            }
            .my-col-12 {
              @include fw-generate-column(12, $my-grid);
            }
        .fw-separator
          span Classic
        .fw-code
          :code
            <div class="fw-grid">
              <div class="fw-grid-row">
                <div class="fw-col-6">col-6</div>
                <div class="fw-col-6">col-6</div>
              </div>
              <div class="fw-grid-row">
                <div class="fw-col-4">col-4</div>
                <div class="fw-col-4">col-4</div>
                <div class="fw-col-4">col-4</div>
              </div>
            </div>

      div.fw-container
        .fw-code
          :code
            <div class="my-grid">
              <div class="my-grid-row">
                <div class="my-grid-col my-col-6 my-col-md-12">col-6</div>
                <div class="my-grid-col my-col-6 my-col-md-12">col-6</div>
              </div>
              <div class="my-grid-row">
                <div class="my-grid-col my-col-4 my-col-md-6">col-4</div>
                <div class="my-grid-col my-col-4 my-col-md-6">col-4</div>
                <div class="my-grid-col my-col-4 my-col-md-6">col-4</div>
              </div>
            </div>
        .fw-code.scss
          :code
            // define default grid
            $my-grid: (
              // grid size (pick 2 of 3 arguments below, third argument will be calculated):
              columns: 12,           // I   [full number]
              gridWidth: 100%,       // II  [px, %, 4/5]
              // columnWidth: 25%,   // III [px, %, 4/5]

              // additional options (not required):
              spacingX: 10px, // [px]
              spacingY: 10px  // [px]
            );

            // generate style for default grid
            .my-grid {
              @include fw-generate-grid($my-grid);
            }

            // generate style for default rows
            .my-grid-row {
              @include fw-grid-row($my-grid);
            }

            // generate base style for columns
            .my-grid-col {
              @include fw-column-base($my-grid);
            }

            // single column sizing
            .my-col {
              @include fw-generate-column(6, $my-grid); // (6/12 = 50%)
            }

            // or multi column sizing
            .my-col {
              // generate my-col-1 ... 12
              @for $col from 1 through map-get($my-grid, columns) {
                &-#{$col} {
                  @include fw-generate-column($col, $my-grid);
                }
              }
            }



            // optional
            // define grid for medium devices
            $my-grid-md: (
              columns: 12,           // [full number]
              gridWidth: 100%,       // [px, %, 4/5]
              spacingX: 0, // [px]
              spacingY: 0  // [px]
            );

            @include fw-media(md){

              // generate my-col-md-1 ... 12
              .my-col-md {
                @for $col from 1 through map-get($my-grid-md, columns) {
                  &-#{$col} {
                    @include fw-generate-column($col, $my-grid-md);
                  }
                }
              }

              // generate base style for medium columns
              .my-grid-col { @include fw-column-base($my-grid-md); }

              // generate style for grid on medium devices
              .my-grid { @include fw-generate-grid($my-grid-md); }

              // generate style for row on medium devices
              .my-grid-row { @include fw-grid-row($my-grid-md); }
            }


      div.fw-container
        p <b>Column sizing classes:</b><br>
          | <b>default</b> fw-col-1 ... 12 (1 = 1/12), (12 = 12/12 = 100%)
        p <b>Column size for smaller devices:</b><br>
          | <b>extra large</b> fw-col-xl-1 ... 12<br>
          | <b>large</b> fw-col-lg-1 ... 12<br>
          | <b>medium</b> fw-col-md-1 ... 12<br>
          | <b>small</b> fw-col-sm-1 ... 12<br>
          | <b>extra small</b> fw-col-xs-1 ... 12<br>
        .fw-code
          :code
            <div class="fw-grid">
              <div class="fw-grid-row">
                <div class="fw-col-6 fw-col-md-12">col</div>
                <div class="fw-col-6 fw-col-md-12">col</div>
                <div class="fw-col-6 fw-col-md-12">col</div>
              </div>
              <div class="fw-grid-row">
                <div class="fw-col-4 fw-col-md-6 fw-col-sm-12">col</div>
                <div class="fw-col-4 fw-col-md-6 fw-col-sm-12">col</div>
                <div class="fw-col-4 fw-col-md-6 fw-col-sm-12">col</div>
              </div>
            </div>



</splitSection>


<splitSection output="output/responsive_grid_demo.jade">

block meta
  link(rel="stylesheet", href="../assets/css/demos/demo.css" id="mainstyle")
  link(rel="stylesheet", href="./grid_demo.css" id="mainstyle")

block title
  title Responsive grid demo

block content

  .fw-grid.demo-responsive
    .fw-grid-row
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col
      .fw-col-2.fw-col-lg-3.fw-col-md-4.fw-col-sm-6.fw-col-xs-12 col


</splitSection>




<splitSection output="output/responsive_grid_tiles_demo.jade">

block meta
  link(rel="stylesheet", href="../assets/css/demos/demo.css" id="mainstyle")
  link(rel="stylesheet", href="./grid_demo.css" id="mainstyle")

block title
  title Responsive tiles grid demo

block content
  .fw-grid.demo-tiles
    .fw-grid-row.fw-bg-bluegrey-500
      .fw-col-6.fw-col-xs-12
        .fw-tile.fw-tile-050(style="background-image: url(https://static.pexels.com/photos/36367/pexels-photo-large.jpg)")
          .fw-tile-content
            p Label the <b>tile</b>
      .fw-col-3.fw-col-md-6.fw-col-xs-12
        .fw-tile.fw-tile-050(style="background-image: url(https://static.pexels.com/photos/7529/pexels-photo-large.jpeg)")
          .fw-tile-content
            p Label the <b>tile</b>
      .fw-col-3.fw-col-md-6.fw-col-xs-12
        .fw-tile.fw-tile-050(style="background-image: url(https://static.pexels.com/photos/54536/pexels-photo-54536.jpeg)")
          .fw-tile-content
            p Label the <b>tile</b>
      .fw-col-3.fw-col-md-6.fw-col-xs-12
        .fw-tile.fw-tile-050(style="background-image: url(https://static.pexels.com/photos/4952/sky-beach-vacation-summer-medium.jpeg)")
          .fw-tile-content.dimmed
            p Label the <b>tile</b>
      .fw-col-3.fw-col-md-6.fw-col-xs-12
        .fw-tile.fw-tile-025.fw-bg-red
          .fw-tile-content
            p Label the <b>tile</b>
      .fw-col-3.fw-col-md-6.fw-col-xs-12
        .fw-tile.fw-tile-025(style="background-image: url(https://static.pexels.com/photos/26521/pexels-photo-large.jpg)")
          .fw-tile-content
            p Label the <b>tile</b>



</splitSection>



<splitSection output="output/grid_demo.scss">
  .demo-responsive {
    .fw-grid {
      outline: solid 2px #333;
    }
    .fw-grid-row {
      > * {
        border: solid 1px #ddd;
        padding: 10px 0;

        //- color: #fff;
        background: #fff;
        text-align: center;
        //- @include fw-ellipsis;
        //- font-weight: bold;
        padding: 20px 0;
      }
    }
  }
  .demo-tiles {
    p {
      margin: 0;
      display: inline-block;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      -webkit-transform: translate(-50%, -50%);
      text-align: center;
    }

    .fw-tile-content {
      border: solid 2px #94DDE8;
      background: #fff;
    }
    .fw-tile {
      cursor: pointer;
      &,& * {transition: all 0.33s;}
    }
    .fw-tile-content {
      background: rgba(0,0,0,0);
      color: #fff;
      border: none;
      &.dimmed {
        background: rgba(35,45,50,0.5);
      }
      &:hover {
        background: rgba(35,45,50,0.7);
      }
    }


  }


</splitSection>


<splitSection output="output/gridSystem_section.scss">

.sec-gridSystem {
  .fw-grid {
    outline: solid 2px #333;
    //- // padding: 20px;
    //- background: #546e7a;
  }
  .fw-grid-row {
    > * {
      border: solid 1px #ddd;
      padding: 10px 0;

      //- color: #fff;
      background: #fff;
      text-align: center;
      @include fw-ellipsis;
      //- font-weight: bold;
      //- padding: 20px 0;
    }
  }
}

</splitSection>


<splitSection output="output/gridSystem_semantic.scss">

// ------------------------
// helper function for grid
//

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function fw-decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// source:
// http://stackoverflow.com/questions/29901096/sass-scss-rounding-down-with-decimal-places
@function fw-decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function fw-decimal-ceil ($number, $digits: 0) {
  @return fw-decimal-round($number, $digits, ceil);
}

// calculate and check grid size settings
@function fw-grid-calc(
  $settings: null
){
  $columns: map-get($settings, columns);
  $gridWidth: map-get($settings, gridWidth);
  $columnWidth: map-get($settings, columnWidth);
  $spacingX: map-get($settings, spacingX);
  $spacingY: map-get($settings, spacingY);

  // ---------------
  // check arguments
  //

  // force to pass only 2 arguments
  $args: 0;
  @if $columns != null { $args: $args+1 }
  @if $gridWidth != null { $args: $args+1 }
  @if $columnWidth != null { $args: $args+1 }
  @if $args != 2 {
    @error "You have to pass two 'sizing arguments' to generate grid.";
  }


  // if width is unitless proportion - convert to %;
  @if $gridWidth and type-of($gridWidth) == number {
    @if unitless($gridWidth) {
      @if $gridWidth <= 0 or $gridWidth > 1 {
        @error 'grid: $gridWidth #{$gridWidth} gives you #{$gridWidth * 100%}, $gridWidth must be between 1% and 100%';
      }
      $gridWidth: $gridWidth * 100%;
    }
  }

  // if column is unitless proportion - convert to %;
  @if $columnWidth and type-of($columnWidth) == number {
    @if unitless($columnWidth) {
      @if $columnWidth<= 0 or $columnWidth > 1 {
        @error 'grid: $columnWidth #{$columnWidth} gives you #{$columnWidth * 100%}, $columnWidth must be between 1% and 100%';
      }
      $columnWidth: $columnWidth * 100%;
    }
  }

  // prevent passing number of columns and percentage columnWidth same time
  @if $columns and type-of($columnWidth) == number {
    @if unit($columnWidth) == "%" {
      @error "grid: you can't define number of columns and columnWidth in [%] at the same time.";
    }
  }

  // -------------------------
  // check argument data types
  //

  // $columns must be a full unitless number, for example: 12
  // $columns: null;
  @if $columns {
    @if type-of($columns) != number or unitless($columns) == false or round($columns) != $columns {
      @error 'grid: $columns #{$columns} must be a full unitless number, for example: 12';
    }
    @if $columns <= 0 {
      @error 'grid: $columns #{$columns} must be bigger than 0';
    }
  }

  // $gridWidth must be a number in [0+]px or [1-100]% or unitless [a/b]proportion, for example: 960px or 80% or 4/5
  // $gridWidth: 10;
  @if $gridWidth {
    @if type-of($gridWidth) != number or
        unit($gridWidth) != px and
        unit($gridWidth) != "%" and
        unitless($gridWidth) != true {
      @error 'grid: $gridWidth #{$gridWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 960px or 80% or 4/5';
    }
    @if $gridWidth <= 0 {
      @error 'grid: $gridWidth #{$gridWidth} must be bigger than 0';
    }
  }

  // $columnWidth must be a number in px or %, or unitless proportion, for example: 80px or 10%, or 1/12
  // $columnWidth: 1%;
  @if $columnWidth {
    @if type-of($columnWidth) != number or
        unit($columnWidth) != px and
        unit($columnWidth) != "%" and
        unitless($columnWidth) != true {
      @error 'grid: $columnWidth #{$columnWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 80px or 10% or 1/12';
    }
    @if $columnWidth <= 0 {
      @error 'grid: $columnWidth #{$columnWidth} must be bigger than 0';
    }
  }

  // $spacingX must be a number in px[0+], for example: 20px
  // $spacingX: 20px;
  @if $spacingX {
    @if type-of($spacingX) != number or
        (unit($spacingX) == px or unitless($spacingX)) == false {
      @error 'grid: $spacingX #{$spacingX} must be a number in px[0+], for example: 20px';
    }
  }
  // $spacingY must be a number in px[0+], for example: 20px
  // $spacingY: 12px;
  @if $spacingY {
    @if type-of($spacingY) != number or
        (unit($spacingY) == px or unitless($spacingY)) == false {
      @error 'grid: $spacingY #{$spacingY} must be a number in px[0+], for example: 20px';
    }
  }

  // --------------------------------------
  // calculate missing third size arguments
  //

  // automatically calculate third argument of sizing
  // case calculate size
  @if $gridWidth and $columnWidth {

    // case 1 width in % column in %
    @if unit($gridWidth) == "%" and unit($columnWidth) == "%" {
      $columns: floor(100%/$columnWidth);
    }

    // case 2 width in % column in px
    @if unit($gridWidth) == "%" and unit($columnWidth) == px {
      $columns: 12;
    }

    // case 3 width in px column in %
    @if unit($gridWidth) == px and unit($columnWidth) == "%" {
      $columns: floor(100%/$columnWidth);
    }

    // check if user passed proper column width for case 1 or 3
    @if (unit($gridWidth) == "%" and unit($columnWidth) == "%") or
        (unit($gridWidth) == px and unit($columnWidth) == "%") {
      $check-width: fw-decimal-ceil($columns * $columnWidth, 5);
      @if $check-width != 100% {
        @error 'grid: Wrong column width: #{$columns}cols * #{$columnWidth} = #{$check-width}, a sum of 100% is expected.';
      }
    }

    // case 4 width in px column in px
    @if unit($gridWidth) == px and unit($columnWidth) == px {
      $columns: floor($gridWidth / $columnWidth);
      $check-width: fw-decimal-ceil($columns * $columnWidth, 5);
      @if $check-width != $gridWidth {
        @error 'grid: Wrong column width: #{$columns}cols * #{$column} = #{$check-width}, #{$gridWidth}(grid width) is expected.';
      }
    }
  }
  // case calculate width
  @else if $columns and $columnWidth {
    // case 5 size and column in %
    @if unit($columnWidth) == "%" {
      // you can't define size and column width in % at the same time
      // $gridWidth has been set to 100% and go to calculations in case 7
    }

    // case 6 size and column in px
    @if unit($columnWidth) == px {
      $gridWidth: $columns * $columnWidth;
    }
  }

  // case calculate column
  @else if $columns and $gridWidth {
    // case 7 size and grid width in %
    // calculate column width by dividing 100%/$columns
    @if unit($gridWidth) == "%" {
      $columnWidth: 100% / $columns;
    }

    // case 8 size and width in px
    @if unit($gridWidth) == px {
      $columnWidth: $gridWidth / $columns;
    }
  }

  @return (
    columns: $columns,
    gridWidth: $gridWidth,
    columnWidth: $columnWidth,
    spacingX: $spacingX,
    spacingY: $spacingY
  )
}

@mixin fw-generate-grid(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $columns: map-get($grid-calc, columns);
  $gridWidth: map-get($grid-calc, gridWidth);
  $columnWidth: map-get($grid-calc, columnWidth);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);

  box-sizing: border-box;
  margin: auto;
  width: $gridWidth;
  @include fw-clearfix;

}




@mixin fw-generate-column(
  $span: null,
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $columnWidth: map-get($grid-calc, columnWidth);
  $columns: map-get($grid-calc, columns);
  $spacingX: map-get($grid-calc, spacingX);
  $spanWidth: $span * $columnWidth;
  // if spacingX is defined - remove it's width from columnWidth
  @if $spacingX {
    @if unit($columnWidth) == px or $spacingX == 0 {
      // PX Width
      $columnWidth: $columnWidth + $spacingX / $columns;
      width: -1 * fw-decimal-round($spacingX + $columnWidth * $span, 3, floor);
    } @else {
      // % + PX Width
      width: fw-decimal-round($columnWidth * $span, 3, floor); // old browsers fallback
      width: calc(#{-1 * $spacingX} + #{fw-decimal-round($columnWidth * $span, 3, floor)});
    }
  } @else {
    width: fw-decimal-round($columnWidth * $span, 3, floor);
  }
}

@mixin fw-column-base(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);

  box-sizing: border-box;
  float: left;

  @if $spacingX {
    margin-left: $spacingX;
  } @else {
    margin-left: 0;
  }
  @if $spacingY {
    margin-top: $spacingY;
  } @else {
    margin-top: 0;
  }

}

@mixin fw-grid-row(
  $settings: null
){
  $grid-calc: fw-grid-calc($settings);
  $spacingX: map-get($grid-calc, spacingX);
  $spacingY: map-get($grid-calc, spacingY);
  @include fw-clearfix;
  @if $spacingX {
    margin-left: #{$spacingX * -1};
  } @else {
    margin-left: 0;
  }
  @if $spacingY {
    margin-top: #{$spacingY * -1};
  } @else {
    margin-top: 0;
  }

}

</splitSection>


<splitSection output="output/gridSystem_selectors.scss">




$grid: (
  // grid size (pick 2 of 3 arguments below, third argument will be calculated):
  columns: 12,           // [full number]
  gridWidth: 100%,       // [px, %, 4/5]
  // columnWidth: 25%,   // [px, %, 4/5]
  // additional options (not required):
  // spacingX: 10px, // [px]
  // spacingY: 20px  // [px]
);
.fw-grid { @include fw-generate-grid($grid); }
.fw-grid-row { @include fw-grid-row($grid); }
.fw {
  &-col-1, &-col-2, &-col-3, &-col-4, &-col-5, &-col-6, &-col-7, &-col-8, &-col-9, &-col-10, &-col-11, &-col-12,
  &-col-xs-1, &-col-xs-2, &-col-xs-3, &-col-xs-4, &-col-xs-5, &-col-xs-6, &-col-xs-7, &-col-xs-8, &-col-xs-9, &-col-xs-10, &-col-xs-11, &-col-xs-12,
  &-col-sm-1, &-col-sm-2, &-col-sm-3, &-col-sm-4, &-col-sm-5, &-col-sm-6, &-col-sm-7, &-col-sm-8, &-col-sm-9, &-col-sm-10, &-col-sm-11, &-col-sm-12,
  &-col-md-1, &-col-md-2, &-col-md-3, &-col-md-4, &-col-md-5, &-col-md-6, &-col-md-7, &-col-md-8, &-col-md-9, &-col-md-10, &-col-md-11, &-col-md-12,
  &-col-lg-1, &-col-lg-2, &-col-lg-3, &-col-lg-4, &-col-lg-5, &-col-lg-6, &-col-lg-7, &-col-lg-8, &-col-lg-9, &-col-lg-10, &-col-lg-11, &-col-lg-12,
  &-col-xl-1, &-col-xl-2, &-col-xl-3, &-col-xl-4, &-col-xl-5, &-col-xl-6, &-col-xl-7, &-col-xl-8, &-col-xl-9, &-col-xl-10, &-col-xl-11, &-col-xl-12 {
    @include fw-column-base($grid);
  }

  // generate regular column size
  @for $col from 1 through map-get($grid, columns) {
    &-col-#{$col} {
      @include fw-generate-column($col, $grid);
    }
  }

  // generate size with breakpoints
  $breakpoints: xl, lg, md, sm, xs;
  @each $bp in $breakpoints {
    @include fw-media($bp){
      @for $col from 1 through map-get($grid, columns) {
        &-col-#{$bp} {
          &-#{$col} {
            @include fw-generate-column($col, $grid);
          }
        }
      }
    }
  }
}





</splitSection>