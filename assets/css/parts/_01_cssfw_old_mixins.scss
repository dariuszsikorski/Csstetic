
// ----------------------------------------------------------------------

@mixin old-grid(
  // $columns must be a full unitless number, for example: 12
  $columns: null,

  // $gridWidth must be a number in px @or %, or unitless proportion, for example 960px or 80%, or 4/5
  $gridWidth: null,

  // $columnWidth must be a number in px or %, or unitless proportion, for example: 80px or 10%, or 1/12
  $columnWidth: null,

  // $columnClass must be a string starting with .L where L is letter, for example: ".col"
  $columnClass: ".ui-old-col",

  // $spacingX must be a number in px, for example: 20px
  $spacingX: null,

  // $spacingY must be a number in px, for example: 20px
  $spacingY: null,

  // $media must be a string, for example: "md"
  $media: null,

  // string, top/middle/bottom
  $showNames: null
){

  // ---------------------------------
  // convert unitless proportions to %
  // conversion can be replaced with
  // calc(a/b) in web browsers
  //

  // if width is unitless proportion - convert to %;
  @if $gridWidth and type-of($gridWidth) == number {
    @if unitless($gridWidth) {
      @if $gridWidth <= 0 or $gridWidth > 1 {
        @error 'grid: $gridWidth #{$gridWidth} gives you #{$gridWidth * 100%}, $gridWidth must be between 1% and 100%';
      }
      $gridWidth: $gridWidth * 100%;
    }
  }

  // if column is unitless proportion - convert to %;
  @if $columnWidth and type-of($columnWidth) == number {
    @if unitless($columnWidth) {
      @if $columnWidth<= 0 or $columnWidth > 1 {
        @error 'grid: $columnWidth #{$columnWidth} gives you #{$columnWidth * 100%}, $columnWidth must be between 1% and 100%';
      }
      $columnWidth: $columnWidth * 100%;
    }
  }

  // ------------------------
  // check argument relations
  //

  // if user did not pass any arguments, ask to define at least $columns
  @if ($columns or $gridWidth or $columnWidth or $columnClass or
       $spacingX or $spacingY or $media) == null {
    @error 'grid: Please define at least two arguments for grid, for example $columns: 12, $columnClass: ".col".';
  }

  // user can define only two from three sizing arguments
  // at the same time ($columns, $gridWidth, $columnWidth)
  @if $columns and $gridWidth and $columnWidth {
    @error 'grid: You can define only two arguments from $columns, $gridWidth, $columnWidth at the same time.';
  }

  // if only one of sizing argument is defined,
  // ask to define another one
  // but if only size is defined, set grid width to 100%
  @if $columns and $gridWidth == null and $columnWidth == null {
    $gridWidth: 100%;
  }
  @if $gridWidth and $columns == null and $columnWidth == null {
    @error 'grid: Please add $columns or $columnWidth when $gridWidth is defined.';
  }
  @if $columnWidth and $columns == null and $gridWidth == null {
    @error 'grid: Please add $columns or $gridWidth when $columnWidth is defined.';
  }

  // if user defined a grid size,
  // you can't define column width in % at the same time
  @if $columns and type-of($columnWidth) == number {
    @if unit($columnWidth) == % {
      @error "grid: please define only $columns, or define $columnWidth in px units.";
    }
  }

  // check if user passed properly two of three sizing arguments
  $sizing-defined: false;
  @if ($columns and $gridWidth and $columnWidth == null) or
      ($columns and $columnWidth and $gridWidth == null) or
      ($gridWidth and $columnWidth and $columns == null) {
    $sizing-defined: true;
  }
  // when user defined sizing arguments,
  // ask to define $columnClass selector
  @if $sizing-defined and $columnClass == null {
    @error 'grid: When grid sizing arguments are defined, please define $columnClass selector.';
  }

  // when user define $spacingX or $spacingY
  // ask to define $columnClass selector
  @if ($spacingX or $spacingY) and $columnClass == null {
    @error 'grid: Please define $columnClass selector, when $spacingX or $spacingY is defined.';
  }

  // if $spacingX or $spacingY is defined, mark $spacing as defined
  $spacing-defined: false;
  @if $spacingX or $spacingY {
    $spacing-defined: true;
  }

  // when user defined breakpoint
  // ask to define size or spacing
  @if $media and ( $sizing-defined == false and $spacing-defined == false ) {
    @error 'grid: When $media is defined, please define grid size or spacing.';
  }

  // if $columnClass is defined, and $spacing or $sizing is not defined
  // ask to define spacing or sizing
  @if $columnClass and ($spacing-defined or $sizing-defined) == false {
    @error 'grid: Please define grid $columns, or children $spacing, when $columnClass selector is defined.';
  }

  // if $showNames and $columns is not defined
  // ask to define $columns
  @if $showNames and $columns == null{
    @error 'grid: Please define $columns, to show column names.';
  }

  // -------------------------
  // check argument data types
  //

  // $columns must be a full unitless number, for example: 12
  // $columns: null;
  @if $columns {
    @if type-of($columns) != number or unitless($columns) == false or round($columns) != $columns {
      @error 'grid: $columns #{$columns} must be a full unitless number, for example: 12';
    }
    @if $columns <= 0 {
      @error 'grid: $columns #{$columns} must be bigger than 0';
    }
  }

  // $gridWidth must be a number in [0+]px or [1-100]% or unitless [a/b]proportion, for example: 960px or 80% or 4/5
  // $gridWidth: 10;
  @if $gridWidth {
    @if type-of($gridWidth) != number or
        unit($gridWidth) != px and
        unit($gridWidth) != % and
        unitless($gridWidth) != true {
      @error 'grid: $gridWidth #{$gridWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 960px or 80% or 4/5';
    }
    @if $gridWidth <= 0 {
      @error 'grid: $gridWidth #{$gridWidth} must be bigger than 0';
    }
  }

  // $columnWidth must be a number in px or %, or unitless proportion, for example: 80px or 10%, or 1/12
  // $columnWidth: 1%;
  @if $columnWidth {
    @if type-of($columnWidth) != number or
        unit($columnWidth) != px and
        unit($columnWidth) != % and
        unitless($columnWidth) != true {
      @error 'grid: $columnWidth #{$columnWidth} must be a number in px[0+] or %[1-100] or unitless proportion[a/b], for example: 80px or 10% or 1/12';
    }
    @if $columnWidth <= 0 {
      @error 'grid: $columnWidth #{$columnWidth} must be bigger than 0';
    }
  }

  // $columnClass must be a string starting with .L where L is letter, for example: ".col"
  @if $columnClass {
    @if type-of($columnClass) != string or
        str-slice($columnClass, 0, 1) != "." {
      @error 'grid: $columnClass #{$columnClass} must be a string starting with .L where L is letter, for example: ".col"';
    }
  }

  // $spacingX must be a number in px[0+], for example: 20px
  // $spacingX: 20px;
  @if $spacingX {
    @if type-of($spacingX) != number or
        (unit($spacingX) == px or unitless($spacingX)) == false {
      @error 'grid: $spacingX #{$spacingX} must be a number in px[0+], for example: 20px';
    }
  }
  // $spacingY must be a number in px[0+], for example: 20px
  // $spacingY: 12px;
  @if $spacingY {
    @if type-of($spacingY) != number or
        (unit($spacingY) == px or unitless($spacingY)) == false {
      @error 'grid: $spacingY #{$spacingY} must be a number in px[0+], for example: 20px';
    }
  }

  // $media must be a string, for example: "md"
  @if $media {
    @if type-of($media) != string {
      @error 'grid: $media #{$media} must be a string, for example: "md"';
    }
  }

  // $showNames must be a string: top/middle/bottom
  @if $showNames {
    @if type-of($showNames) != string {
      @error 'grid: $showNames must be a string: "top", "middle" or "bottom"';
    }
  }

  // --------------------------------------
  // calculate missing third size arguments
  //

  @if $sizing-defined {
    // automatically calculate third argument of sizing
    // case calculate size
    @if $gridWidth and $columnWidth {

      // case 1 width in % column in %
      @if unit($gridWidth) == % and unit($columnWidth) == % {
        $columns: floor(100%/$columnWidth);
      }

      // case 2 width in % column in px
      @if unit($gridWidth) == % and unit($columnWidth) == px {
        $columns: 24;
      }

      // case 3 width in px column in %
      @if unit($gridWidth) == px and unit($columnWidth) == % {
        $columns: floor(100%/$columnWidth);
      }

      // check if user passed proper column width for case 1 or 3
      @if (unit($gridWidth) == % and unit($columnWidth) == %) or
          (unit($gridWidth) == px and unit($columnWidth) == %) {
        $check-width: old-decimal-ceil($columns * $columnWidth, 5);
        @if $check-width != 100% {
          @error 'grid: Wrong column width: #{$columns}cols * #{$columnWidth} = #{$check-width}, a sum of 100% is expected.';
        }
      }

      // case 4 width in px column in px
      @if unit($gridWidth) == px and unit($columnWidth) == px {
        $columns: floor($gridWidth / $columnWidth);
        $check-width: old-decimal-ceil($columns * $columnWidth, 5);
        @if $check-width != $gridWidth {
          @error 'grid: Wrong column width: #{$columns}cols * #{$column} = #{$check-width}, #{$gridWidth}(grid width) is expected.';
        }
      }
    }
    // case calculate width
    @else if $columns and $columnWidth {
      // case 5 size and column in %
      @if unit($columnWidth) == % {
        // you can't define size and column width in % at the same time
        // $gridWidth has been set to 100% and go to calculations in case 7
      }

      // case 6 size and column in px
      @if unit($columnWidth) == px {
        $gridWidth: $columns * $columnWidth;
      }
    }

    // case calculate column
    @else if $columns and $gridWidth {
      // case 7 size and grid width in %
      // calculate column width by dividing 100%/$columns
      @if unit($gridWidth) == % {
        $columnWidth: 100% / $columns;
      }

      // case 8 size and width in px
      @if unit($gridWidth) == px {
        $columnWidth: $gridWidth / $columns;
      }
    }
  }

  // -------------------------------
  // create main generate grid mixin
  //

  @mixin old-generate-grid {

    // --------------------------------------------------------
    // create prefix for all childrens and define spacing mixin
    //

    @mixin old-add-children-spacing(){
      @if $spacingX { padding-left: $spacingX; }
      @if $spacingY { padding-bottom: $spacingY; }
    }
    @mixin old-add-container-margin(){
      @if $spacingX { margin-left: $spacingX * -1;}
      @if $spacingY { margin-bottom: $spacingY * -1; }
    }

    $child-prefix: str-slice($columnClass, 2, str-length($columnClass)) + "-";

    // ---------------------------------------------------------------------
    // generate new grid spacing between items, when only spacing is defined
    //

    @if $spacing-defined and $sizing-defined == false {
      @include old-add-container-margin;
      > {
        @include old-classname-begin($child-prefix){
          @include old-add-children-spacing;
        }
      }
    }

    // --------------------------------------
    // generate new grid, columns and spacing
    //

    @if $sizing-defined {
      @if $spacing-defined {
        @include old-add-container-margin;
      }
      // define selector for columns
      $current-children: $columnClass + "-";

      // define styling for grid container
      @if $media == null {
        // if breakpoint is not defined
        // it means grid is defined for the first time
        @extend %old-clearfix;
        @if $gridWidth == 100% {
          width: auto;
        } @else {
          width: $gridWidth;
        }
        box-sizing: border-box;
        > {
          @include old-classname-begin($child-prefix){
            float: left;
            box-sizing: border-box;
            @extend %old-clearfix;
            @if $spacing-defined {
              @include old-add-children-spacing;
            }
            @if $showNames {
              position: relative;
              // &:after is reserved for clearfix
              &:before {
                position: absolute;
                // text-shadow: 0 1px 3px #000;
                text-align: center;
                display: block;
                left: 0;
                width: 100%;
                color: #464D5D;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
                z-index: 2; // restore column name beeing overlapped by column content

                @include old-media(xxs){
                  display: none !important;
                }
                @if $showNames == "top" { top: 8%; }
                @if $showNames == "bottom" { bottom: 8%; }
                @if $showNames == "middle" {
                  top: 50%;
                  transform: translateY(-50%);
                  -webkit-transform: translateY(-50%);
                }
              }
            }
          }
        }
      } @else {
        // if breakpoint is defined
        // modify selector for columns
        $current-children: $columnClass + "-" + $media + "-";
        @if $gridWidth == 100% {
          width: auto;
        } @else {
          width: $gridWidth;
        }
        > {
          @include old-classname-begin($child-prefix){
            @if $spacing-defined {
              @include old-add-children-spacing;
            }
          }
        }
      }

      // generate column widths
      @for $loop from 1 through $columns {
        > #{$current-children + $loop} {
          width: old-decimal-ceil($loop * $columnWidth, 5);
          @if $showNames {
            &:before {
              $columnName: $current-children + $loop;
              // remove dot from name:
              $columnName: str-slice($columnName, 2, str-length($columnName));
              content: "#{$columnName}";
            }
          }
        }
      }
    }
  }

  // call generate grid mixin, and if breakpoint is defined,
  // wrap code in mediaquery same as the breakpoint name
  @if $media {
    @include old-media($media){
      @include old-generate-grid;
    }
  } @else {
      @include old-generate-grid;
  }
}



// ----------------------------------------------------------------------

%old-tile {
  position: relative;
  display: inline-block;
  vertical-align: top; // remove spacing
  background-position: center;
  background-size: cover;
  width: 100%;
  &:after {
    display: block;
    content: "";
  }
  > * {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;
    box-sizing: border-box;
  }
}

@mixin old-tile(
  $height: 100%
){
  // check unit types
  @if type-of($height) != number {
    @error "tile width must be a number";
  }

  @extend %old-tile;

  // convert unitless number (proportion) to percent
  @if unitless($height) {
    $height: $height * 100%;
  }

  // define tile size;
  &:after {
    padding-bottom: $height; // ie8 fallback
    padding-bottom: calc(#{$height} + 0.5px); // fix subpixel rendering
  }
}



// ----------------------------------------------------------------------

%old-slice-element {
  // better width and height calculations
  box-sizing: border-box;
}
@mixin old-slice {
  @extend %old-slice-element;
  display: table;

  // prevent table-elements from resizing by it's contents
  table-layout: fixed;

  // by default table is as small as possible, let's stretch it
  // to full parent size
  width: 100%;
  height: 100%;

}

@mixin old-row {
  @extend %old-slice-element;

  display: table-row;

  // rows don't require width and height
  // by default they stretch to 100% width and stretch height equally

  // the row which has to take all available space needs height: 100%; (but it's calculated wrong on IE)
  // better solution is to set height: 1px on all rows, which has to collapse
}
@mixin old-col {
  @extend %old-slice-element;

  // cols don't need width, they will have equal widths if not defined
  display: table-cell;

  // this is needed for nested cells on IE 9+
  height: inherit;

  // make neighbour columns have indepentend margin-top for it's content
  vertical-align: top;

  // you can combine rows and cols in the same parent table
  // all cols will behave like rows then, but allowing
  // nested tables inside to inherit the column(row) height

  // fix empty col styling (required on firefox)
  &:after{
    content: "\00a0";
    font-size: 0.001px;
    display: block;
  }

}

@mixin old-breakSlice (
  $media: null
){
  @if $media {
    @include old-media($media){
      display: block !important;
      // outline: solid 5px red;
      > * {
        display: block !important;
        height: auto !important;
        width: auto !important;
      }
    }
  } @else {
    display: block !important;
    // outline: solid 5px blue;
    > * {
      display: block !important;
      height: auto !important;
      width: auto !important;
    }
  }
}



// ----------------------------------------------------------------------

%old-bar-side {
  display: inline-block;
  width: 100%;
  margin-right: -100%;
  vertical-align: middle;
  > * {
    position: relative;
    z-index: 1; // fix bar elements z-order
    display: inline-block;

  }
}

@mixin old-bar(){
  // background: #20D07F;
  // color: #fff;
  width: 100%;
  // display: block;
  font-size: 0; // clear gaps
  text-align: left;
  > * {
    // sides
    font-size: 16px; // restore font size
  }
  > * {
    vertical-align: top;
  }
}

@mixin old-bar-left (){
  @extend %old-bar-side;
  text-align: left;
}
@mixin old-bar-center (){
  @extend %old-bar-side;
  text-align: center;
}
@mixin old-bar-right (){
  @extend %old-bar-side;
  text-align: right;
}
@mixin old-bar-break (){
  margin-right: 0;
}



// ----------------------------------------------------------------------

@mixin old-pile(
  $horizontal-align: left,
  $vertical-align: null,
  $spacing: 10
){

  // check variable types
  @if type-of($horizontal-align) != string {
    @error "$horizontal-align must be a string";
  }

  // apply one of four options of horizontal-align items
  @if $horizontal-align == left {text-align: left;}
  @if $horizontal-align == center {text-align: center;}
  @if $horizontal-align == right {text-align: right;}
  @if $horizontal-align == justify {
    text-align: justify;
    width: 100%;
    &:after {
      content: "";
      width: 100%;
      display: inline-block;
    }
  }

}

%old-pile-item {
  display: inline-block;
  text-align: left;
  &:last-child {
    margin-right: 0;
  }
}


@mixin old-pile-item(
  $vertical-align: middle,
  $spacing: 10
){

  // check variable types
  @if type-of($vertical-align) != string {
    @error "$vertical-align must be a string";
  }
  @if type-of($spacing) != number {
    @error "$spacing must be a number";
  }

  // pile-item base code
  @extend %old-pile-item;

  // convert spacing to pixels
  @if unitless($spacing) {
    $spacing: $spacing * 1px;
  }

  // apply spacing if has been defined
  @if $spacing != 0px {
    margin-right: $spacing;
  }

  // additional property - align items to top, middle or bottom of the line
  @if $vertical-align == top {vertical-align: top;}
  @if $vertical-align == middle {vertical-align: middle;}
  @if $vertical-align == bottom {vertical-align: bottom;}
}



// ----------------------------------------------------------------------

@mixin old-list-item(){
  display: block;
  width: 100%;
}



// ----------------------------------------------------------------------

//



// ----------------------------------------------------------------------

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     old-decimal-round(0.333)    => 0
//     old-decimal-round(0.333, 1) => 0.3
//     old-decimal-round(0.333, 2) => 0.33
//     old-decimal-round(0.666)    => 1
//     old-decimal-round(0.666, 1) => 0.7
//     old-decimal-round(0.666, 2) => 0.67
//
@function old-decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}


// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     old-decimal-ceil(0.333)    => 1
//     old-decimal-ceil(0.333, 1) => 0.4
//     old-decimal-ceil(0.333, 2) => 0.34
//     old-decimal-ceil(0.666)    => 1
//     old-decimal-ceil(0.666, 1) => 0.7
//     old-decimal-ceil(0.666, 2) => 0.67
//
@function old-decimal-ceil ($number, $digits: 0) {
    @return old-decimal-round($number, $digits, ceil);
}


// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     old-decimal-floor(0.333)    => 0
//     old-decimal-floor(0.333, 1) => 0.3
//     old-decimal-floor(0.333, 2) => 0.33
//     old-decimal-floor(0.666)    => 0
//     old-decimal-floor(0.666, 1) => 0.6
//     old-decimal-floor(0.666, 2) => 0.66
//
@function old-decimal-floor ($number, $digits: 0) {
    @return old-decimal-round($number, $digits, floor);
}

@function old-number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);


    @if $character == '-' {
      $minus: true;
    }

    @else if $character == '.' {
      $divider: 1;
    }

    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return old-_length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      }

      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}


@function old-_length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);

  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @return $number * nth($units, $index);
}


@function old-strip-unit($value) {
  @return $value / ($value * 0 + 1);
}


@mixin old-classname-begin(
  $begin: null
) {
  @if type-of($begin) != string {
    @error 'classname-begin accepts only a string as an argument';
  }
  $begin: unquote($begin);
  &[class^='#{$begin}'],
  &[class*=' #{$begin}'] {
    @content;
  }
}

// Fetch nested keys
@function old-map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}



// ----------------------------------------------------------------------

// convert-unit function
// usage: old-convert-unit( inputValue, outputUnit )
// example: old-convert-unit(32px, rem);

@function old-convert-unit(
  $value,
  $outputUnit: px
){
  // default unit sizes measured in px for 1920x1200 (imac 24') screen
  // http://www.w3schools.com/browsers/browsers_display.asp
  // http://www.w3schools.com/cssref/css_units.asp
  $units: (
    px:   1,
    em:   16,
    ex:   9.12656,
    ch:   9.78827,
    rem:  16,
    vw:   17.4545,
    vh:   9.86364,
    vmin: 9.86364,
    vmax: 17.4545,
    "%":    0.16,
    cm:   37.7953,
    mm:   3.77953,
    in:   96,
    pt:   1.33333,
    pc:   16
  );

  // check if input value is a number
  @if type-of($value) == number {
    $inputUnit: unit($value);

    // define variable for value to px conversion
    $pxValue: 1;

    // define variable for px to output value conversion
    $outputValue: 1px;

    // if input value was unitless, convert it to pixels
    @if unitless($value){
      $value: $value * 1px;
    }

    // convert input value to px units
    // @each Key, Value in Map
    @each $keyUnit, $size in $units {
      @if $inputUnit == $keyUnit {
        $pxValue: old-strip-unit($value) * $size;
      }
    }

    // convert pxValue to output value
    @each $keyUnit, $size in $units {
      @if $outputUnit == $keyUnit {
        $outputValue: old-_length($pxValue / $size,  $outputUnit);
      }
    }

    @return $outputValue;
  }

  // return communicate when $value is not a number
  @return "value must be a number";
}



// ----------------------------------------------------------------------

%old-clearfix {
  &:after {
    a: a;
    content: "";
    display: table;
    clear: both;
  }
}

@mixin old-clearfix(){
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}



// ----------------------------------------------------------------------

@function old-scaleValues(
  $begin: null, // for example 50px
  $end: null, // for example 100px
  $scale: null // for 1 - return 100px, for 0 - return
){
  @if $begin and $end and $scale{
    $result: "";

    // loop through each value
    @for $i from 1 through length($begin) {
      $beginValue: nth($begin, $i);
      $endValue: nth($end, $i);

      @if type-of($beginValue) != number or type-of($endValue) != number {
        @warn "error in '#{$key}: (#{$beginValue}) => (#{$endValue})'' - use only number values."
      }

      @if unit($beginValue) != unit($endValue) {
        @warn "error in '#{$key}: (#{$beginValue}) => (#{$endValue})' - different unit types."
      }

      $beginValue: nth($begin, $i);
      $valueGrowth: old-decimal-round(((nth($end, $i) - nth($begin, $i)) * $scale), 3);
      $scaledValue: $beginValue + $valueGrowth;
      $result: $result + $scaledValue;
      // add spaces between values
      @if $i != length($begin){
        $result: $result + " ";
      }
    }
    @return unquote($result);
  } @else {
    @warn "begin values, end values and scale must be defined.";
  }
}

@mixin old-scalePoint(
  $properties: null,
  $point: null,
  $beginScale: 480px,
  $endScale: 1500px
){
  @if $properties == null {
    @error "you must define properties to scalePoint.";
  }
  @if $point == null {
    @error "you must define point to scalePoint for example 768px.";
  }
  @if $point < $beginScale {
    @error "defined $point: #{$point} can't be smaller than $beginScale: #{$beginScale}.";
  }
  @if $point > $endScale {
    @error "defined $point: #{$point} can't be bigger than $endScale: #{$endScale}.";
  }
  // calculate scale of growth for defined point
  $scaleSize: $endScale - $beginScale;
  $currentPoint: $point - $beginScale;
  $scale: $currentPoint / $scaleSize;
  @each $property in $properties {
    $key: nth($property, 1);
    $value: nth($property, 2);
    @if type-of($value) != list {
      @error "value of #{$key} must look like this (start values, end values).";
    }
    $begin: nth($value, 1);
    $end: nth($value, 2);
    @if length($begin) != length($end) {
      @error "error in '#{$key}: (#{$begin}) => (#{$end})' - different number of values.";
    }
    #{$key}: old-scaleValues($begin, $end, $scale);
  }
}

@mixin old-scale(
  $properties: null
){
  @if $properties == null {
    @error "scale needs at least one property";
  }
  @if type-of($properties) != map {
    @error "scale must be passed like this:
  scale((
    property1: (start, end),
    property2: (start1 start2, end1 end2),
    ...
  ))
";}
    @include old-scalePoint($properties, 1500px);
    @include old-media(lg){
      @include old-scalePoint($properties, 1280px);
    }
    @include old-media(md){
      @include old-scalePoint($properties, 1024px);
    }
    @include old-media(sm){
      @include old-scalePoint($properties, 768px);
    }
    @include old-media(xs){
      @include old-scalePoint($properties, 480px);
    }
}

// returns a scale factor between 0 and 1 for given resolution
@function old-getResolutionScale(
  $resolution // best for something between 480px and 1500px
){
  $beginScale: 480px;
  $endScale: 1500px;
  $scaleSize: $endScale - $beginScale;
  $currentPoint: $resolution - $beginScale;
  $scale: $currentPoint / $scaleSize;
  @return $scale;
};



// ----------------------------------------------------------------------

// @include old-media(number) will define media from 0 to number
// @include old-media(number min, number max) will define from min to max range
// @include old-media(string name) will define media for targeted device / viewport
// available sizes:
// mobile
// mobile-portrait
// mobile-landscape
// tablet
// tablet-portrait
// tablet-landscape
// laptop
// desktop
// xxs
// xs
// sm
// md
// lg
// xl
// xxl

@mixin old-media(
  $size: null,
  $max: null
){
  // check arguments
  @if $size == null {
    @error "please define size in screen() mixin";
  }

  // available media names
  @if $size == mobile {
    @media (max-width: 767px) {
      @content;
    }
  }
  @if $size == mobile-portrait or $size == watch {
    @media (max-width: 320px) {
      @content;
    }
  }
  @if $size == mobile-landscape {
    @media (min-width: 321px) and (max-width: 767px) {
      @content;
    }
  }
  @if $size == tablet {
    @media (max-width: 1280px) {
      @content;
    }
  }
  @if $size == tablet-portrait {
    @media (min-width: 768px) and (max-width: 1023px) {
      @content;
    }
  }
  @if $size == tablet-landscape {
    @media (min-width: 1024px) and (max-width: 1280px) {
      @content;
    }
  }
  @if $size == laptop {
    @media (max-width: 1600px) {
      @content;
    }
  }
  @if $size == desktop {
    @media (min-width: 1281px) {
      @content;
    }
  }
  @if $size == xxs {
    @media (max-width: 320px) {
      @content;
    }
  }
  @if $size == xs {
    @media (max-width: 500px) {
      @content;
    }
  }
  @if $size == sm {
    @media (max-width: 768px) {
      @content;
    }
  }
  @if $size == md {
    @media (max-width: 1024px) {
      @content;
    }
  }
  @if $size == lg {
    @media (max-width: 1280px) {
      @content;
    }
  }
  @if $size == xl {
    @media (max-width: 1400px) {
      @content;
    }
  }
  @if $size == xxl {
    @media (max-width: 1600px) {
      @content;
    }
  }

  // set media query in range from 0 to $max width
  @if type-of($size) == number and $max == null {
    @media (max-width: $size) {
      @content;
    }
  }

  // set media query in range from min $size to $max width
  @if type-of($size) == number and type-of($max) == number {
    @media (min-width: $size) and (max-width: $max) {
      @content;
    }
  }

  //
  @if $max != null and type-of($max) != number {
    @error "second argumnet (max-width) must be a number.";
  }
}

@mixin old-media-info {
  all: initial;
  background: #0C3E71;
  color: #fff;
  font-size: 12px;
  font-family: Verdana;
  display: block;
  // transition: all 0.25s;
  overflow: hidden;
  @include old-media(desktop){
    &:before {
      content: "media: desktop";
    }
    &:after {
      content: "1601+";
    }
  };
  @include old-media(laptop){
    &:before {
      content: "media: laptop";
    }
  };
  @include old-media(tablet-landscape){
    &:before {
      content: "media: tablet, tablet-landscape";
    }
  };
  @include old-media(tablet-portrait){
    &:before {
      content: "media: tablet, tablet-portrait";
    }
  };
  @include old-media(mobile-landscape){
    &:before {
      content: "media: mobile, mobile-landscape";
    }
  };
  @include old-media(mobile-portrait){
    &:before {
      content: "media: watch, mobile, mobile-portrait, xxs 0-320";
    }
  };
  @include old-media(xxl){
    background: #0D5292;
    &:after {
      content: "xxl 0-1600";
    }
  };
  @include old-media(xl){
    &:after {
      content: "xl 0-1400";
    }
  };
  @include old-media(lg){
    background: #0C3E71;
    &:after {
      content: "lg 0-1280";
    }
  };
  @include old-media(md){
    &:after {
      content: "md 0-1024";
    }
  };
  @include old-media(sm){
    background: #0D5292;
    &:after {
      content: "sm 0-768";
    }
  };
  @include old-media(xs){
    &:after {
      content: "xs 0-500";
    }
  };
  @include old-media(xxs){
    background: #0C3E71;
    &:before {
      text-align: center;
      border-radius: 0 !important;
    }
    &:after {
      display: none;
    }
  };
  &:before {
    float: left;
    // border-radius: 0 100px 100px 0;
    padding: 7px 15px 7px 10px;
  }
  &:after {
    float: right;
    // border-radius: 100px 0 0 100px;
    padding: 7px 10px 7px 15px;
  }
  &:before,
  &:after {
    // background: rgba(0, 0, 0, 0.25);
  }
}



// ----------------------------------------------------------------------

// a map of Material Ui Colors
// https://www.google.com/design/spec/style/color.html

// available colors:
// red, pink, purple, deeppurple, indigo, blue, lightblue,
// cyan, teal, green, lightgreen, lime, yellow, amber,
// orange, deeporange, brown, grey, bluegrey
// + extra colors: black, white only available in shade 500 which is #000 & #fff

// shade 500 is default color for material colors

// available shades:
// A-shades are not available in last 3 material colors

// 50
// 100
// 200
// 300
// 400
// 500
// 600
// 700
// 800
// 900
// A100
// A200
// A400
// A700

$materialColors: (
  red: (
    50: #ffebee,
    100: #ffcdd2,
    200: #ef9a9a,
    300: #e57373,
    400: #ef5350,
    500: #f44336,
    600: #e53935,
    700: #d32f2f,
    800: #c62828,
    900: #b71c1c,
    A100: #ff8a80,
    A200: #ff5252,
    A400: #ff1744,
    A700: #d50000
  ),
  pink: (
    50: #FCE4EC,
    100: #F8BBD0,
    200: #F48FB1,
    300: #F06292,
    400: #EC407A,
    500: #E91E63,
    600: #D81B60,
    700: #C2185B,
    800: #AD1457,
    900: #880E4F,
    A100: #FF80AB,
    A200: #FF4081,
    A400: #F50057,
    A700: #C51162
  ),
  purple: (
    50: #F3E5F5,
    100: #E1BEE7,
    200: #CE93D8,
    300: #BA68C8,
    400: #AB47BC,
    500: #9C27B0,
    600: #8E24AA,
    700: #7B1FA2,
    800: #6A1B9A,
    900: #4A148C,
    A100: #EA80FC,
    A200: #E040FB,
    A400: #D500F9,
    A700: #AA00FF
  ),
  deeppurple: (
    50: #EDE7F6,
    100: #D1C4E9,
    200: #B39DDB,
    300: #9575CD,
    400: #7E57C2,
    500: #673AB7,
    600: #5E35B1,
    700: #512DA8,
    800: #4527A0,
    900: #311B92,
    A100: #B388FF,
    A200: #7C4DFF,
    A400: #651FFF,
    A700: #6200EA
  ),
  indigo: (
    50: #E8EAF6,
    100: #C5CAE9,
    200: #9FA8DA,
    300: #7986CB,
    400: #5C6BC0,
    500: #3F51B5,
    600: #3949AB,
    700: #303F9F,
    800: #283593,
    900: #1A237E,
    A100: #8C9EFF,
    A200: #536DFE,
    A400: #3D5AFE,
    A700: #304FFE
  ),
  blue: (
    50: #E3F2FD,
    100: #BBDEFB,
    200: #90CAF9,
    300: #64B5F6,
    400: #42A5F5,
    500: #2196F3,
    600: #1E88E5,
    700: #1976D2,
    800: #1565C0,
    900: #0D47A1,
    A100: #82B1FF,
    A200: #448AFF,
    A400: #2979FF,
    A700: #2962FF
  ),
  lightblue: (
    50: #E1F5FE,
    100: #B3E5FC,
    200: #81D4FA,
    300: #4FC3F7,
    400: #29B6F6,
    500: #03A9F4,
    600: #039BE5,
    700: #0288D1,
    800: #0277BD,
    900: #01579B,
    A100: #80D8FF,
    A200: #40C4FF,
    A400: #00B0FF,
    A700: #0091EA
  ),
  cyan: (
    50: #E0F7FA,
    100: #B2EBF2,
    200: #80DEEA,
    300: #4DD0E1,
    400: #26C6DA,
    500: #00BCD4,
    600: #00ACC1,
    700: #0097A7,
    800: #00838F,
    900: #006064,
    A100: #84FFFF,
    A200: #18FFFF,
    A400: #00E5FF,
    A700: #00B8D4
  ),
  teal: (
    50: #E0F2F1,
    100: #B2DFDB,
    200: #80CBC4,
    300: #4DB6AC,
    400: #26A69A,
    500: #009688,
    600: #00897B,
    700: #00796B,
    800: #00695C,
    900: #004D40,
    A100: #A7FFEB,
    A200: #64FFDA,
    A400: #1DE9B6,
    A700: #00BFA5
  ),
  green: (
    50: #E8F5E9,
    100: #C8E6C9,
    200: #A5D6A7,
    300: #81C784,
    400: #66BB6A,
    500: #4CAF50,
    600: #43A047,
    700: #388E3C,
    800: #2E7D32,
    900: #1B5E20,
    A100: #B9F6CA,
    A200: #69F0AE,
    A400: #00E676,
    A700: #00C853
  ),
  lightgreen: (
    50: #F1F8E9,
    100: #DCEDC8,
    200: #C5E1A5,
    300: #AED581,
    400: #9CCC65,
    500: #8BC34A,
    600: #7CB342,
    700: #689F38,
    800: #558B2F,
    900: #33691E,
    A100: #CCFF90,
    A200: #B2FF59,
    A400: #76FF03,
    A700: #64DD17
  ),
  lime: (
    50: #F9FBE7,
    100: #F0F4C3,
    200: #E6EE9C,
    300: #DCE775,
    400: #D4E157,
    500: #CDDC39,
    600: #C0CA33,
    700: #AFB42B,
    800: #9E9D24,
    900: #827717,
    A100: #F4FF81,
    A200: #EEFF41,
    A400: #C6FF00,
    A700: #AEEA00
  ),
  yellow: (
    50: #FFFDE7,
    100: #FFF9C4,
    200: #FFF59D,
    300: #FFF176,
    400: #FFEE58,
    500: #FFEB3B,
    600: #FDD835,
    700: #FBC02D,
    800: #F9A825,
    900: #F57F17,
    A100: #FFFF8D,
    A200: #FFFF00,
    A400: #FFEA00,
    A700: #FFD600
  ),
  amber: (
    50: #FFF8E1,
    100: #FFECB3,
    200: #FFE082,
    300: #FFD54F,
    400: #FFCA28,
    500: #FFC107,
    600: #FFB300,
    700: #FFA000,
    800: #FF8F00,
    900: #FF6F00,
    A100: #FFE57F,
    A200: #FFD740,
    A400: #FFC400,
    A700: #FFAB00
  ),
  orange: (
    50: #FFF3E0,
    100: #FFE0B2,
    200: #FFCC80,
    300: #FFB74D,
    400: #FFA726,
    500: #FF9800,
    600: #FB8C00,
    700: #F57C00,
    800: #EF6C00,
    900: #E65100,
    A100: #FFD180,
    A200: #FFAB40,
    A400: #FF9100,
    A700: #FF6D00
  ),
  deeporange: (
    50: #FBE9E7,
    100: #FFCCBC,
    200: #FFAB91,
    300: #FF8A65,
    400: #FF7043,
    500: #FF5722,
    600: #F4511E,
    700: #E64A19,
    800: #D84315,
    900: #BF360C,
    A100: #FF9E80,
    A200: #FF6E40,
    A400: #FF3D00,
    A700: #DD2C00
  ),
  brown: (
    50: #EFEBE9,
    100: #D7CCC8,
    200: #BCAAA4,
    300: #A1887F,
    400: #8D6E63,
    500: #795548,
    600: #6D4C41,
    700: #5D4037,
    800: #4E342E,
    900: #3E2723
  ),
  grey: (
    50: #FAFAFA,
    100: #F5F5F5,
    200: #EEEEEE,
    300: #E0E0E0,
    400: #BDBDBD,
    500: #9E9E9E,
    600: #757575,
    700: #616161,
    800: #424242,
    900: #212121
  ),
  bluegrey: (
    50: #ECEFF1,
    100: #CFD8DC,
    200: #B0BEC5,
    300: #90A4AE,
    400: #78909C,
    500: #607D8B,
    600: #546E7A,
    700: #455A64,
    800: #37474F,
    900: #263238
  ),
  black: (
    500: #000000
  ),
  white: (
    500: #ffffff
  )
);

// function for easy retreiving colors from MaterialUi Color Map
@function old-material($name: blue, $shade: 500){
  @if ( $name == white ) or ( $name == black ) { $shade: 500 }
  @return old-map-deep-get($materialColors, $name, $shade);
}

// alias for material function
@function old-color($name: blue, $shade: 500){
  @return old-material($name, $shade);
}



// ----------------------------------------------------------------------

//



// ----------------------------------------------------------------------

// set background-color
@mixin old-background($name: blue, $shade: 600){
  background-color: old-material($name, $shade);
}



// ----------------------------------------------------------------------

%old-size {
  box-sizing: border-box;
  display: inline-block;
  // vertical-align: middle;
}
button%old-size,
[type=button]%old-size {
  line-height: normal;
}

@mixin old-generate-size(
  $height: null,
  $proportion: 0.45
){

  // in case if passed custom height
  @if $height == null {
    @error "height must be defined for generate size";
  }

  @if type-of($height) != number {
    @error "$height: #{$height} must be a number.";
  }

  // convert height to 'px' if unit wasn't defined
  @if unitless($height) {
    $height: $height * 1px;
  }

  // calculate proportional padding
  $padding-x: ($height)*$proportion;

  // calculate best font size and weight for element
  $unit: unit($height);
  $base-font: old-convert-unit(11px, $unit);
  $base-height: old-convert-unit(20px, $unit);
  $font-growth: 0.25;
  $extra-font: ($height - $base-height) * $font-growth;
  $font-size: $base-font + $extra-font;
  $font-weight: null; // this will be overwritten by conditions below
  @if $height <= old-convert-unit(24px, $unit) {
    $font-weight: 700;
  }
  @if $height <= old-convert-unit(30px, $unit) and $height > old-convert-unit(24px, $unit) {
    $font-weight: 600;
  }

  //render calculated values as css properties
  height: $height;
  line-height: $height;
  padding: 0 $padding-x;
  font-size: $font-size;
  font-weight: $font-weight;
  > * {
    line-height: $height;
  }

}

@mixin old-size(
  $height: null,
  $scalable: scalable,
  $proportion: 0.45
){

  // predefined element sizes
  @if $height == xs { $height: 20px; }
  @if $height == sm { $height: 24px; }
  @if $height == md { $height: 30px; }
  @if $height == lg { $height: 38px; }
  @if $height == xl { $height: 48px; }
  @if $height == xxl { $height: 60px; }
  @if $height == xxxl { $height: 74px; }
  @if $height == hg { $height: 90px; }

  @if type-of($height) == number {

    @extend %old-size;
    @include old-generate-size($height, $proportion);

    // generate responsive size for smaller devices if $scalalble is set to "scale"
    @if $scalable == scalable and old-convert-unit($height, px) > 30px {
      $minHeight: (($height - 30px)*0.5) + 30px; // smallest scaled element size
      @include old-media(lg){
        $scale: old-getResolutionScale(1280px);
        $mediaHeight: old-number(old-scaleValues($minHeight, $height, $scale));
        @include old-generate-size($mediaHeight, $proportion);
      }
      @include old-media(md){
        $scale: old-getResolutionScale(1024px);
        $mediaHeight: old-number(old-scaleValues($minHeight, $height, $scale));
        @include old-generate-size($mediaHeight, $proportion);

      }
      @include old-media(sm){
        $scale: old-getResolutionScale(768px);
        $mediaHeight: old-number(old-scaleValues($minHeight, $height, $scale));
        @include old-generate-size($mediaHeight, $proportion);

      }
      @include old-media(xs){
        $scale: old-getResolutionScale(480px);
        $mediaHeight: old-number(old-scaleValues($minHeight, $height, $scale));
        @include old-generate-size($mediaHeight, $proportion);
      }
    }
  }
}



// ----------------------------------------------------------------------

@mixin old-position(
  $position: center,
  $offset: inner
){

  // available positions:
  // top-left
  // left
  // bottom-left
  // top
  // center
  // bottom
  // top-right
  // right ght
  // bottom-right

  // available offsets"
  // inner - inside element
  // edge - on the edge of element
  // outer - outside element

  position: absolute;

  @if $position == top-left {
    top: 0;
    left: 0;
    @if $offset == edge {
      transform: translateX(-50%) translateY(-50%);
    }
    @if $offset == outer {
      transform: translateX(-100%) translateY(-100%);
    }
  }

  @if $position == left {
    top: 50%;
    left: 0;
    @if $offset == inner {
      transform: translateY(-50%);
    }
    @if $offset == edge {
      transform: translateX(-50%) translateY(-50%);
    }
    @if $offset == outer {
      transform: translateX(-100%) translateY(-50%);
    }
  }

  @if $position == bottom-left {
    bottom: 0;
    left: 0;
    @if $offset == edge {
      transform: translateX(-50%) translateY(50%);
    }
    @if $offset == outer {
      transform: translateX(-100%) translateY(100%);
    }
  }

  @if $position == top {
    top: 0;
    left: 50%;
    @if $offset == inner {
      transform: translateX(-50%);
    }
    @if $offset == edge {
      transform: translateX(-50%) translateY(-50%);
    }
    @if $offset == outer {
      transform: translateX(-50%) translateY(-100%);
    }
  }

  @if $position == center {
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
  }

  @if $position == bottom {
    bottom: 0;
    left: 50%;
    @if $offset == inner {
      transform: translateX(-50%);
    }
    @if $offset == edge {
      transform: translateX(-50%) translateY(50%);
    }
    @if $offset == outer {
      transform: translateX(-50%) translateY(100%);
    }
  }

  @if $position == top-right {
    top: 0;
    right: 0;
    @if $offset == edge {
      transform: translateX(50%) translateY(-50%);
    }
    @if $offset == outer {
      transform: translateX(100%) translateY(-100%);
    }
  }

  @if $position == right {
    top: 50%;
    right: 0;
    @if $offset == inner {
      transform: translateY(-50%);
    }
    @if $offset == edge {
      transform: translateX(50%) translateY(-50%);
    }
    @if $offset == outer {
      transform: translateX(100%) translateY(-50%);
    }
  }

  @if $position == bottom-right {
    bottom: 0;
    right: 0;
    @if $offset == edge {
      transform: translateX(50%) translateY(50%);
    }
    @if $offset == outer {
      transform: translateX(100%) translateY(100%);
    }
  }

}



// ----------------------------------------------------------------------

%box {
  box-sizing: border-box;
}

@mixin old-generate-box(
  $padding: null,
  $proportion: 0.7
){

  @if $padding == null {
    @error "padding must be defined for generate box";
  }

  @if type-of($padding) != number {
    @error "$padding: #{$padding} must be a number.";
  }

  // convert padding to 'px' if unit wasn't defined
  @if unitless($padding) {
    $padding: $padding * 1px;
  }

  // calculate proportional padding
  $padding-y: $padding * $proportion;

  //render calculated value as css property
  padding: $padding-y $padding;

}

@mixin old-box(
  $padding: null,
  $scalable: scalable,
  $proportion: 0.75
){

  // box size presets
  @if $padding == xs { $padding: 10px; }
  @if $padding == sm { $padding: 15px; }
  @if $padding == md { $padding: 20px; }
  @if $padding == lg { $padding: 30px; }
  @if $padding == xl { $padding: 60px; }
  @if $padding == xxl { $padding: 90px; }
  @if $padding == xxxl { $padding: 120px; }

  @if type-of($padding) == number {

    @extend %box;
    @include old-generate-box($padding, $proportion);

    // generate responsive box for smaller devices if $scalable is set to "scalable"
    @if $scalable == scalable and old-convert-unit($padding, px) > 10px {
      $minPadding: (($padding - 10px)*0.1) + 10px; // smallest scaled box
      @include old-media(lg){
        $scale: old-getResolutionScale(1280px);
        $mediaPadding: old-number(old-scaleValues($minPadding, $padding, $scale));
        @include old-generate-box($mediaPadding, $proportion);
      }
      @include old-media(md){
        $scale: old-getResolutionScale(1024px);
        $mediaPadding: old-number(old-scaleValues($minPadding, $padding, $scale));
        @include old-generate-box($mediaPadding, $proportion);

      }
      @include old-media(sm){
        $scale: old-getResolutionScale(768px);
        $mediaPadding: old-number(old-scaleValues($minPadding, $padding, $scale));
        @include old-generate-box($mediaPadding, $proportion);

      }
      @include old-media(xs){
        $scale: old-getResolutionScale(480px);
        $mediaPadding: old-number(old-scaleValues($minPadding, $padding, $scale));
        @include old-generate-box($mediaPadding, $proportion);
      }
    }
  }
}



// ----------------------------------------------------------------------

// set text color
@mixin old-color($name: blue, $shade: 500){
  color: old-material($name, $shade);
}



// ----------------------------------------------------------------------

$round-radius: .25em;
$round-radius-lg: .5em;
$round-radius-xl: 1em;

// alias for round() mixin
@mixin old-rounded(
  $corners: rounded
){
  @include old-round($corners);
}

// mixin for rounding element corners
@mixin old-round(
  $corners: round
){

  // corner presets
  @if $corners == round {
    $corners: 1000em;
  }
  @if $corners == rounded {
    $corners: $round-radius;
  }
  @if $corners == lg {
    $corners: $round-radius-lg;
  }
  @if $corners == xl {
    $corners: $round-radius-xl;
  }
  @if $corners == ellipse {
    $corners: 100%;
  }
  @if $corners == a1 {
    $corners: 0 $round-radius-lg;
  }
  @if $corners == a2 {
    $corners: $round-radius-lg 0;
  }
  @if $corners == a3 {
    $corners: $round-radius-lg $round-radius-lg 0 0;
  }
  @if $corners == a4 {
    $corners: 0 0 $round-radius-lg $round-radius-lg;
  }
  @if $corners == b1 {
    $corners: $round-radius-lg 0 0 0;
  }
  @if $corners == b2 {
    $corners: 0 $round-radius-lg 0 0;
  }
  @if $corners == b3 {
    $corners: 0 0 $round-radius-lg 0;
  }
  @if $corners == b4 {
    $corners: 0 0 0 $round-radius-lg;
  }

  // generate corners with border-radius
  // if none of the presets was used, border-radius will use custom, user passed size
  border-radius: $corners;

}

